import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.StringTokenizer;

public class BJ_17460 {
	static int N;
	/** row길이 */
	static int M;
	/** col길이 */
	static int R;
	/** 연산 수 */
	static int[][] area;
	static int[][] originArea;
	/** 배열 */
	static int Mmid;
	/** row가운데 */
	static int Nmid;
	/** col가운데 */

	static int[] rows;
	static int[] cols;
	static int[] steps;
	
	static int[] per;
	static boolean[] visited;
	static int result = Integer.MAX_VALUE;
	public static void main(String[] args) throws Exception {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());

		N = toInteger(st.nextToken());
		M = toInteger(st.nextToken());
		R = toInteger(st.nextToken());
		per = new int[R];
		visited = new boolean[R];
		area = new int[N + 1][M + 1];
		originArea = new int[N + 1][M + 1];
		Mmid = (int) Math.ceil((double) M / 2);
		Nmid = (int) Math.ceil((double) N / 2);

		// 배열에 넣어주기
		for (int r = 1; r <= N; r++) {
			st = new StringTokenizer(br.readLine());
			for (int c = 1; c <= M; c++) {
				originArea[r][c] = toInteger(st.nextToken());
			}
		}

		rows = new int[R];
		cols = new int[R];
		steps = new int[R];
		for (int i = 0; i < R; i++) {
			st = new StringTokenizer(br.readLine());
			rows[i] = toInteger(st.nextToken());
			cols[i] = toInteger(st.nextToken());
			steps[i] = toInteger(st.nextToken());
		}
		
		permutation(0);
		System.out.println(result);
		
		
	}

	public static void rotation(int row, int col, int s) {
		int[][] subArea = sub(row, col, s);
		int len = subArea.length;
		int[][] newSubArea = new int[len][len];	
		
		// 왼쪽으로 가는 객체들
		for (int r = 1; r <= s; r++) {
			for (int c = r; c < len - r; c++) {
				newSubArea[r][c + 1] = subArea[r][c];
			}
		}

		// 오른쪽으로 가는 객체들
		for (int r = len-1; r > s + 1; r--) {
			for (int c = r ; c > len-r; c--) {
				newSubArea[r][c - 1] = subArea[r][c];
			}
		}

		
		//아래로 가는 객체들
		for (int c = len-1; c > s + 1; c--) {
			for (int r = len-c; r < c; r++) {
				newSubArea[r + 1][c] = subArea[r][c];
			}
		}

		//위로 가는 객체들
		for (int c = 1; c <= s ; c++) {
			for (int r = c + 1; r <= len - c; r++) {
				newSubArea[r - 1][c] = subArea[r][c];
			}
		}
		newSubArea[s+1][s+1] = subArea[s+1][s+1];
		for (int r = 0; r < s * 2 + 1; r++) {
			for (int c = 0; c < s * 2 + 1; c++) {
				area[row - s + r][col - s + c] = newSubArea[r + 1][c + 1];
			}
		}
		
		
	}

	public static int[][] sub(int row, int col, int s) {
		int[][] subArea = new int[(s * 2 + 1) + 1][(s * 2 + 1) + 1];
		for (int r = 0; r < s * 2 + 1; r++) {
			for (int c = 0; c < s * 2 + 1; c++) {
				subArea[r + 1][c + 1] = area[row - s + r][col - s + c];
			}
		}

		return subArea;
	}
	
	public static int play (int[] per) {
		for(int r =0; r < area.length; r++) {
			for(int c = 0; c < area[0].length; c++) {
				area[r][c] = originArea[r][c];
			}
		}
		
		for(int i = 0; i < R; i++) {
			rotation(rows[per[i]],cols[per[i]],steps[per[i]]);
		}
		int min = Integer.MAX_VALUE;
		for (int r = 1; r <= N; r++) {
			int sum = 0;
			for (int c = 1; c <= M; c++) {
				sum += area[r][c];
			}
			if(sum < min) {
				min = sum;
			}
		}
		return min;
	}

	public static void permutation(int num) {
		if(num == R) {
			int min = play(per);
			if(min < result) {
				result = min;
			}
			return;
		}
		for(int i = 0; i < R; i++) {
			if(!visited[i]) {
				visited[i] = true;				
				per[num] = i;
				permutation(num + 1);
				visited[i] = false;
			}
			
		}
	}

	public static void print(int[][] area) {
		for (int r = 1; r < area.length; r++) {
			for (int c = 1; c < area[0].length; c++) {
				System.out.print(area[r][c] + " ");
			}
			System.out.println();
		}
	}

	public static int toInteger(String s) {
		return Integer.parseInt(s);
	}

}


